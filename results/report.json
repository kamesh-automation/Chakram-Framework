{
  "stats": {
    "suites": 5,
    "tests": 16,
    "passes": 14,
    "pending": 0,
    "failures": 2,
    "start": "2017-06-05T23:43:54.620Z",
    "end": "2017-06-05T23:44:02.898Z",
    "duration": 8278,
    "testsRegistered": 16,
    "passPercent": 87.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Get music",
        "suites": [],
        "tests": [
          {
            "title": "should assert music track based on artist",
            "fullTitle": "Get music should assert music track based on artist",
            "timedOut": false,
            "duration": 797,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "var artist = data.music.artist;\n\t\tvar track = data.music.track;\n\t\treturn chakram.get(endpoint.music + \"/v1/search?q=\" + artist + \"&type=artist\")\n\t\t.then(function (searchResponse) {\n\t\t\tvar bigID = searchResponse.body.artists.items[0].id;\n\t\t\treturn chakram.get(endpoint.music + \"/v1/artists/\" + bigID + \"/top-tracks?country=GB\");\n\t\t})\n\t\t.then(function (topTrackResponse) {\n\t\t\tvar topTrack = topTrackResponse.body.tracks[0];\n\t\t\texpect(topTrack.name).to.contain(track);\n\t\t});",
            "err": {
              "estack": "TypeError: Cannot read property 'items' of undefined\n    at results\\music.js:17:43\n    at _fulfilled (node_modules\\q\\q.js:854:54)\n    at self.promiseDispatch.done (node_modules\\q\\q.js:883:30)\n    at Promise.promise.promiseDispatch (node_modules\\q\\q.js:816:13)\n    at node_modules\\q\\q.js:624:44\n    at runSingle (node_modules\\q\\q.js:137:13)\n    at flush (node_modules\\q\\q.js:125:13)\n    at _combinedTickCallback (internal/process/next_tick.js:73:7)\n    at process._tickCallback (internal/process/next_tick.js:104:9)"
            },
            "isRoot": false,
            "uuid": "aa6d7cea-b65a-42dc-a3eb-fb97cb0a6b16",
            "parentUUID": "7407654c-42e9-41e0-be69-66eba41a585c",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\results\\music.js",
        "uuid": "7407654c-42e9-41e0-be69-66eba41a585c",
        "failedHooks": [],
        "fullFile": "C:\\Users\\rajens5\\workspace\\Chakram\\results\\music.js",
        "passes": [],
        "failures": [
          {
            "title": "should assert music track based on artist",
            "fullTitle": "Get music should assert music track based on artist",
            "timedOut": false,
            "duration": 797,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "var artist = data.music.artist;\n\t\tvar track = data.music.track;\n\t\treturn chakram.get(endpoint.music + \"/v1/search?q=\" + artist + \"&type=artist\")\n\t\t.then(function (searchResponse) {\n\t\t\tvar bigID = searchResponse.body.artists.items[0].id;\n\t\t\treturn chakram.get(endpoint.music + \"/v1/artists/\" + bigID + \"/top-tracks?country=GB\");\n\t\t})\n\t\t.then(function (topTrackResponse) {\n\t\t\tvar topTrack = topTrackResponse.body.tracks[0];\n\t\t\texpect(topTrack.name).to.contain(track);\n\t\t});",
            "err": {
              "estack": "TypeError: Cannot read property 'items' of undefined\n    at results\\music.js:17:43\n    at _fulfilled (node_modules\\q\\q.js:854:54)\n    at self.promiseDispatch.done (node_modules\\q\\q.js:883:30)\n    at Promise.promise.promiseDispatch (node_modules\\q\\q.js:816:13)\n    at node_modules\\q\\q.js:624:44\n    at runSingle (node_modules\\q\\q.js:137:13)\n    at flush (node_modules\\q\\q.js:125:13)\n    at _combinedTickCallback (internal/process/next_tick.js:73:7)\n    at process._tickCallback (internal/process/next_tick.js:104:9)"
            },
            "isRoot": false,
            "uuid": "aa6d7cea-b65a-42dc-a3eb-fb97cb0a6b16",
            "parentUUID": "7407654c-42e9-41e0-be69-66eba41a585c",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasTests": true,
        "hasFailedHooks": false,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 0,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 797,
        "rootEmpty": false
      },
      {
        "title": "POST API calls",
        "suites": [
          {
            "title": "miscellaneous post data",
            "suites": [],
            "tests": [
              {
                "title": "should succeed without a specified name and generate a random name",
                "fullTitle": "POST API calls miscellaneous post data should succeed without a specified name and generate a random name",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(miscellaneousPost).to.have.status(200);\nexpect(miscellaneousPost).to.have.json('this', 'succeeded');\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "1c5291bd-795b-4124-bb3e-d990651a4294",
                "parentUUID": "528d55b3-1527-4fb0-bd0d-c03b7c4827ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assert data retrieval using the new random name",
                "fullTitle": "POST API calls miscellaneous post data should assert data retrieval using the new random name",
                "timedOut": false,
                "duration": 847,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = chakram.get(\"https://dweet.io/get/latest/dweet/for/\"+postThing);\nreturn expect(data).to.have.json('with', function (response) {\n    expect(response).to.have.length(1);\n    var dweet = response[0];\n    expect(dweet.content).to.deep.equal(initialData);\n    expect(dweet.thing).to.equal(postThing);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4de472bd-f6db-4559-8224-74d894595bcc",
                "parentUUID": "528d55b3-1527-4fb0-bd0d-c03b7c4827ad",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\results\\postSchema.js",
            "uuid": "528d55b3-1527-4fb0-bd0d-c03b7c4827ad",
            "failedHooks": [],
            "fullFile": "C:\\Users\\rajens5\\workspace\\Chakram\\results\\postSchema.js",
            "passes": [
              {
                "title": "should succeed without a specified name and generate a random name",
                "fullTitle": "POST API calls miscellaneous post data should succeed without a specified name and generate a random name",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(miscellaneousPost).to.have.status(200);\nexpect(miscellaneousPost).to.have.json('this', 'succeeded');\nreturn chakram.wait();",
                "err": {},
                "isRoot": false,
                "uuid": "1c5291bd-795b-4124-bb3e-d990651a4294",
                "parentUUID": "528d55b3-1527-4fb0-bd0d-c03b7c4827ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assert data retrieval using the new random name",
                "fullTitle": "POST API calls miscellaneous post data should assert data retrieval using the new random name",
                "timedOut": false,
                "duration": 847,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var data = chakram.get(\"https://dweet.io/get/latest/dweet/for/\"+postThing);\nreturn expect(data).to.have.json('with', function (response) {\n    expect(response).to.have.length(1);\n    var dweet = response[0];\n    expect(dweet.content).to.deep.equal(initialData);\n    expect(dweet.thing).to.equal(postThing);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4de472bd-f6db-4559-8224-74d894595bcc",
                "parentUUID": "528d55b3-1527-4fb0-bd0d-c03b7c4827ad",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 849,
            "rootEmpty": false
          }
        ],
        "tests": [
          {
            "title": "should return success http status code",
            "fullTitle": "POST API calls should return success http status code",
            "timedOut": false,
            "duration": 1405,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return expect(namedPost).to.have.status(200);",
            "err": {},
            "isRoot": false,
            "uuid": "bf8adfb3-24c3-4307-a7d4-2ddf17ce5b45",
            "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "assert should be success in the response 'this' field",
            "fullTitle": "POST API calls assert should be success in the response 'this' field",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return expect(namedPost).to.have.json('this', 'succeeded');",
            "err": {},
            "isRoot": false,
            "uuid": "3a92bab1-7e88-452d-bcd7-ad8cb83347d3",
            "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should respond with the created request data",
            "fullTitle": "POST API calls should respond with the created request data",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return expect(namedPost).to.have.json('with.content', initialData);",
            "err": {},
            "isRoot": false,
            "uuid": "53a9d6c1-169f-4fc6-bb56-9f88602010b6",
            "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should assert success for the provided name",
            "fullTitle": "POST API calls should assert success for the provided name",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return expect(namedPost).to.have.json('with.thing', name);",
            "err": {},
            "isRoot": false,
            "uuid": "23977707-d4df-4f51-a615-90ecd860d2a9",
            "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should allow retrieval of the last data point",
            "fullTitle": "POST API calls should allow retrieval of the last data point",
            "timedOut": false,
            "duration": 668,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var dataRetrieval = chakram.get(\"https://dweet.io/get/latest/dweet/for/\"+name);\nreturn expect(dataRetrieval).to.have.json('with[0].content', initialData);",
            "err": {},
            "isRoot": false,
            "uuid": "0302150c-53c3-4584-baa2-223113f005cb",
            "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should respond with data matching the dweet schema",
            "fullTitle": "POST API calls should respond with data matching the dweet schema",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var expectedSchema = {\n    type: \"object\",\n    properties: {\n        this: {type: \"string\"},\n        by: {type: \"string\"},\n        the: {type: \"string\"},\n        with: {\n            type: \"object\",\n            properties: {\n                thing: {type: \"string\"},\n                created: {type: \"string\"},\n                content: {type: \"object\"}\n            },\n            required: [\"thing\", \"created\", \"content\"]\n        }\n    },\n    required: [\"this\", \"by\", \"the\", \"with\"]\n};\nreturn expect(namedPost).to.have.schema(expectedSchema);",
            "err": {},
            "isRoot": false,
            "uuid": "3c21aa67-7ed8-4a2e-b739-7857de6be1ed",
            "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\results\\postSchema.js",
        "uuid": "d76df518-c191-48e1-b78c-e22299baa8d5",
        "failedHooks": [],
        "fullFile": "C:\\Users\\rajens5\\workspace\\Chakram\\results\\postSchema.js",
        "passes": [
          {
            "title": "should return success http status code",
            "fullTitle": "POST API calls should return success http status code",
            "timedOut": false,
            "duration": 1405,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return expect(namedPost).to.have.status(200);",
            "err": {},
            "isRoot": false,
            "uuid": "bf8adfb3-24c3-4307-a7d4-2ddf17ce5b45",
            "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "assert should be success in the response 'this' field",
            "fullTitle": "POST API calls assert should be success in the response 'this' field",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return expect(namedPost).to.have.json('this', 'succeeded');",
            "err": {},
            "isRoot": false,
            "uuid": "3a92bab1-7e88-452d-bcd7-ad8cb83347d3",
            "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should respond with the created request data",
            "fullTitle": "POST API calls should respond with the created request data",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return expect(namedPost).to.have.json('with.content', initialData);",
            "err": {},
            "isRoot": false,
            "uuid": "53a9d6c1-169f-4fc6-bb56-9f88602010b6",
            "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should assert success for the provided name",
            "fullTitle": "POST API calls should assert success for the provided name",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return expect(namedPost).to.have.json('with.thing', name);",
            "err": {},
            "isRoot": false,
            "uuid": "23977707-d4df-4f51-a615-90ecd860d2a9",
            "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should allow retrieval of the last data point",
            "fullTitle": "POST API calls should allow retrieval of the last data point",
            "timedOut": false,
            "duration": 668,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var dataRetrieval = chakram.get(\"https://dweet.io/get/latest/dweet/for/\"+name);\nreturn expect(dataRetrieval).to.have.json('with[0].content', initialData);",
            "err": {},
            "isRoot": false,
            "uuid": "0302150c-53c3-4584-baa2-223113f005cb",
            "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should respond with data matching the dweet schema",
            "fullTitle": "POST API calls should respond with data matching the dweet schema",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var expectedSchema = {\n    type: \"object\",\n    properties: {\n        this: {type: \"string\"},\n        by: {type: \"string\"},\n        the: {type: \"string\"},\n        with: {\n            type: \"object\",\n            properties: {\n                thing: {type: \"string\"},\n                created: {type: \"string\"},\n                content: {type: \"object\"}\n            },\n            required: [\"thing\", \"created\", \"content\"]\n        }\n    },\n    required: [\"this\", \"by\", \"the\", \"with\"]\n};\nreturn expect(namedPost).to.have.schema(expectedSchema);",
            "err": {},
            "isRoot": false,
            "uuid": "3c21aa67-7ed8-4a2e-b739-7857de6be1ed",
            "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasFailedHooks": false,
        "hasSuites": true,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2086,
        "rootEmpty": false
      },
      {
        "title": "Validate API response details",
        "suites": [],
        "tests": [
          {
            "title": "should assert API response status code",
            "fullTitle": "Validate API response details should assert API response status code",
            "timedOut": false,
            "duration": 415,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//var exists = chakram.get(\"http://httpbin.org/status/200\");\nvar exists = chakram.get(endpoint.openAPI + \"/status/200\");\nvar missing = chakram.get(endpoint.openAPI + \"/status/404\");\nreturn chakram.waitFor([\n\t\texpect(exists).to.have.status(200),\n\t\texpect(missing).to.have.status(404)\n\t]);\n//return chakram.wait(expect(exists).to.have.status(200));",
            "err": {},
            "isRoot": false,
            "uuid": "604ea339-e54d-4bfc-97ba-dc34fdaad206",
            "parentUUID": "2b3a3263-b6f0-4192-a6d2-21df7c9df017",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should assert HTTP specific response values",
            "fullTitle": "Validate API response details should assert HTTP specific response values",
            "timedOut": false,
            "duration": 385,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var response = chakram.get(endpoint.openAPI + \"/get\");\nexpect(response).to.have.json('origin', expectedResponse.origin);\nexpect(response).to.have.json('url', function (url) {\n\texpect(url).to.equal(expectedResponse.url);\n});\nexpect(response).to.comprise.of.json({\n\turl: endpoint.openAPI + \"/get\",\n\theaders: {\n\t\tHost: expectedResponse.headers.Host,\n\t}\n});\nreturn chakram.wait();",
            "err": {},
            "isRoot": false,
            "uuid": "5f707b5b-bde3-49b4-ac54-4094c9ac53cf",
            "parentUUID": "2b3a3263-b6f0-4192-a6d2-21df7c9df017",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\results\\status.js",
        "uuid": "2b3a3263-b6f0-4192-a6d2-21df7c9df017",
        "failedHooks": [],
        "fullFile": "C:\\Users\\rajens5\\workspace\\Chakram\\results\\status.js",
        "passes": [
          {
            "title": "should assert API response status code",
            "fullTitle": "Validate API response details should assert API response status code",
            "timedOut": false,
            "duration": 415,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//var exists = chakram.get(\"http://httpbin.org/status/200\");\nvar exists = chakram.get(endpoint.openAPI + \"/status/200\");\nvar missing = chakram.get(endpoint.openAPI + \"/status/404\");\nreturn chakram.waitFor([\n\t\texpect(exists).to.have.status(200),\n\t\texpect(missing).to.have.status(404)\n\t]);\n//return chakram.wait(expect(exists).to.have.status(200));",
            "err": {},
            "isRoot": false,
            "uuid": "604ea339-e54d-4bfc-97ba-dc34fdaad206",
            "parentUUID": "2b3a3263-b6f0-4192-a6d2-21df7c9df017",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should assert HTTP specific response values",
            "fullTitle": "Validate API response details should assert HTTP specific response values",
            "timedOut": false,
            "duration": 385,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var response = chakram.get(endpoint.openAPI + \"/get\");\nexpect(response).to.have.json('origin', expectedResponse.origin);\nexpect(response).to.have.json('url', function (url) {\n\texpect(url).to.equal(expectedResponse.url);\n});\nexpect(response).to.comprise.of.json({\n\turl: endpoint.openAPI + \"/get\",\n\theaders: {\n\t\tHost: expectedResponse.headers.Host,\n\t}\n});\nreturn chakram.wait();",
            "err": {},
            "isRoot": false,
            "uuid": "5f707b5b-bde3-49b4-ac54-4094c9ac53cf",
            "parentUUID": "2b3a3263-b6f0-4192-a6d2-21df7c9df017",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasFailedHooks": false,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 800,
        "rootEmpty": false
      },
      {
        "title": "API Testing for https://github.com/typicode/jsonplaceholder",
        "suites": [],
        "tests": [
          {
            "title": "should return 1 post",
            "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should return 1 post",
            "timedOut": false,
            "duration": 333,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "/*var expectedJson = {\n            \"userId\": 1,\n            \"id\": 1,\n            \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n            \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n        }*/\n        \t\t\n        //var post = chakram.get(\"http://jsonplaceholder.typicode.com/posts/1\");\n        var post = chakram.get(endpoint.placeHolder + \"/posts/1\");\n        \n        expect(post).to.have.json(getExpectedResponse);\n        \n        return chakram.wait();",
            "err": {},
            "isRoot": false,
            "uuid": "3974663c-e486-4740-94a3-a77f44d89faa",
            "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return all posts",
            "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should return all posts",
            "timedOut": false,
            "duration": 3,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "//var allPosts = chakram.get(\"http://jsonplaceholder.typicode.com/posts\");\nvar allPosts = chakram.get(endpoint.placeHolder + \"/posts\");\n\nexpect(allPosts).to.have.status(200);\n/*//TODO: Figure out how to check the length of a JSON\n\t\t\t\t\n\t\texpect(allPosts).to.have.json('with', function (response) {\n        expect(response).to.have.length(1);\n\t\t}*/\n\t\t\n\t\tconsole.log(allPosts.userId.length)\n\nreturn chakram.wait();",
            "err": {
              "estack": "TypeError: Cannot read property 'length' of undefined\n    at Context.<anonymous> (results\\updatePlaceHolder.js:48:30)"
            },
            "isRoot": false,
            "uuid": "dac41e6b-8dc6-4383-8687-31731d13f66b",
            "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should create 1 post",
            "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should create 1 post",
            "timedOut": false,
            "duration": 430,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "/*var postToBeCreated = {\n    \"data\": {\n        \"title\": \"foo\",\n        \"body\": \"bar\",\n        \"userId\": 1\n    }\n};*/\n\n/*var expectedJson = {\n    \"data\": {\n        \"title\": \"foo\",\n        \"body\": \"bar\",\n        \"userId\": 1\n    },\n        \"id\": 101\n};*/\n\n//var createdPost = chakram.post(\"http://jsonplaceholder.typicode.com/posts\", postToBeCreated);\nvar createdPost = chakram.post(endpoint.placeHolder + \"/posts\", postPlaceHolderRequest);\n\nreturn expect(createdPost).to.comprise.of.json(postNewResponse);",
            "err": {},
            "isRoot": false,
            "uuid": "a799319f-2350-4fdf-bee7-03b9b42b1fa3",
            "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should update 1 post",
            "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should update 1 post",
            "timedOut": false,
            "duration": 1265,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "/*var postToBeUpdated = {\n    \"data\": {\n        \"id\": 1,\n        \"title\": \"foo\",\n        \"body\": \"bar\",\n        \"userId\": 1\n    }\n};*/\n\n/*var expectedJson = {\n    \"data\": {\n        \"id\": 1,\n        \"title\": \"foo\",\n        \"body\": \"bar\",\n        \"userId\": 1\n    },\n        \"id\": 1\n};*/\n\nvar updatedPost = chakram.put(endpoint.placeHolder + \"/posts/1\", putPlaceHolderRequest);\n\nreturn expect(updatedPost).to.comprise.of.json(putExpectedResponse);",
            "err": {},
            "isRoot": false,
            "uuid": "78569c50-5da2-4646-8c56-dea5e8bfc03d",
            "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should delete 1 post",
            "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should delete 1 post",
            "timedOut": false,
            "duration": 647,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var expectedJson = {};\n\nvar deletedPost = chakram.delete(endpoint.placeHolder + \"/posts/1\");\n\nreturn expect(deletedPost).to.comprise.of.json(expectedJson);",
            "err": {},
            "isRoot": false,
            "uuid": "931e3d14-d38b-4910-858f-086a8867ca47",
            "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\results\\updatePlaceHolder.js",
        "uuid": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
        "failedHooks": [],
        "fullFile": "C:\\Users\\rajens5\\workspace\\Chakram\\results\\updatePlaceHolder.js",
        "passes": [
          {
            "title": "should return 1 post",
            "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should return 1 post",
            "timedOut": false,
            "duration": 333,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "/*var expectedJson = {\n            \"userId\": 1,\n            \"id\": 1,\n            \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n            \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n        }*/\n        \t\t\n        //var post = chakram.get(\"http://jsonplaceholder.typicode.com/posts/1\");\n        var post = chakram.get(endpoint.placeHolder + \"/posts/1\");\n        \n        expect(post).to.have.json(getExpectedResponse);\n        \n        return chakram.wait();",
            "err": {},
            "isRoot": false,
            "uuid": "3974663c-e486-4740-94a3-a77f44d89faa",
            "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should create 1 post",
            "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should create 1 post",
            "timedOut": false,
            "duration": 430,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "/*var postToBeCreated = {\n    \"data\": {\n        \"title\": \"foo\",\n        \"body\": \"bar\",\n        \"userId\": 1\n    }\n};*/\n\n/*var expectedJson = {\n    \"data\": {\n        \"title\": \"foo\",\n        \"body\": \"bar\",\n        \"userId\": 1\n    },\n        \"id\": 101\n};*/\n\n//var createdPost = chakram.post(\"http://jsonplaceholder.typicode.com/posts\", postToBeCreated);\nvar createdPost = chakram.post(endpoint.placeHolder + \"/posts\", postPlaceHolderRequest);\n\nreturn expect(createdPost).to.comprise.of.json(postNewResponse);",
            "err": {},
            "isRoot": false,
            "uuid": "a799319f-2350-4fdf-bee7-03b9b42b1fa3",
            "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should update 1 post",
            "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should update 1 post",
            "timedOut": false,
            "duration": 1265,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "/*var postToBeUpdated = {\n    \"data\": {\n        \"id\": 1,\n        \"title\": \"foo\",\n        \"body\": \"bar\",\n        \"userId\": 1\n    }\n};*/\n\n/*var expectedJson = {\n    \"data\": {\n        \"id\": 1,\n        \"title\": \"foo\",\n        \"body\": \"bar\",\n        \"userId\": 1\n    },\n        \"id\": 1\n};*/\n\nvar updatedPost = chakram.put(endpoint.placeHolder + \"/posts/1\", putPlaceHolderRequest);\n\nreturn expect(updatedPost).to.comprise.of.json(putExpectedResponse);",
            "err": {},
            "isRoot": false,
            "uuid": "78569c50-5da2-4646-8c56-dea5e8bfc03d",
            "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should delete 1 post",
            "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should delete 1 post",
            "timedOut": false,
            "duration": 647,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var expectedJson = {};\n\nvar deletedPost = chakram.delete(endpoint.placeHolder + \"/posts/1\");\n\nreturn expect(deletedPost).to.comprise.of.json(expectedJson);",
            "err": {},
            "isRoot": false,
            "uuid": "931e3d14-d38b-4910-858f-086a8867ca47",
            "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "should return all posts",
            "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should return all posts",
            "timedOut": false,
            "duration": 3,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "//var allPosts = chakram.get(\"http://jsonplaceholder.typicode.com/posts\");\nvar allPosts = chakram.get(endpoint.placeHolder + \"/posts\");\n\nexpect(allPosts).to.have.status(200);\n/*//TODO: Figure out how to check the length of a JSON\n\t\t\t\t\n\t\texpect(allPosts).to.have.json('with', function (response) {\n        expect(response).to.have.length(1);\n\t\t}*/\n\t\t\n\t\tconsole.log(allPosts.userId.length)\n\nreturn chakram.wait();",
            "err": {
              "estack": "TypeError: Cannot read property 'length' of undefined\n    at Context.<anonymous> (results\\updatePlaceHolder.js:48:30)"
            },
            "isRoot": false,
            "uuid": "dac41e6b-8dc6-4383-8687-31731d13f66b",
            "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasTests": true,
        "hasFailedHooks": false,
        "hasSuites": false,
        "totalTests": 5,
        "totalPasses": 4,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2678,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "23cca59f-b848-4954-be5b-2e8dacb56763",
    "failedHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasFailedHooks": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should assert music track based on artist",
      "fullTitle": "Get music should assert music track based on artist",
      "timedOut": false,
      "duration": 797,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "var artist = data.music.artist;\n\t\tvar track = data.music.track;\n\t\treturn chakram.get(endpoint.music + \"/v1/search?q=\" + artist + \"&type=artist\")\n\t\t.then(function (searchResponse) {\n\t\t\tvar bigID = searchResponse.body.artists.items[0].id;\n\t\t\treturn chakram.get(endpoint.music + \"/v1/artists/\" + bigID + \"/top-tracks?country=GB\");\n\t\t})\n\t\t.then(function (topTrackResponse) {\n\t\t\tvar topTrack = topTrackResponse.body.tracks[0];\n\t\t\texpect(topTrack.name).to.contain(track);\n\t\t});",
      "err": {
        "estack": "TypeError: Cannot read property 'items' of undefined\n    at results\\music.js:17:43\n    at _fulfilled (node_modules\\q\\q.js:854:54)\n    at self.promiseDispatch.done (node_modules\\q\\q.js:883:30)\n    at Promise.promise.promiseDispatch (node_modules\\q\\q.js:816:13)\n    at node_modules\\q\\q.js:624:44\n    at runSingle (node_modules\\q\\q.js:137:13)\n    at flush (node_modules\\q\\q.js:125:13)\n    at _combinedTickCallback (internal/process/next_tick.js:73:7)\n    at process._tickCallback (internal/process/next_tick.js:104:9)"
      },
      "isRoot": false,
      "uuid": "aa6d7cea-b65a-42dc-a3eb-fb97cb0a6b16",
      "parentUUID": "7407654c-42e9-41e0-be69-66eba41a585c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return success http status code",
      "fullTitle": "POST API calls should return success http status code",
      "timedOut": false,
      "duration": 1405,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "return expect(namedPost).to.have.status(200);",
      "err": {},
      "isRoot": false,
      "uuid": "bf8adfb3-24c3-4307-a7d4-2ddf17ce5b45",
      "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "assert should be success in the response 'this' field",
      "fullTitle": "POST API calls assert should be success in the response 'this' field",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "return expect(namedPost).to.have.json('this', 'succeeded');",
      "err": {},
      "isRoot": false,
      "uuid": "3a92bab1-7e88-452d-bcd7-ad8cb83347d3",
      "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should respond with the created request data",
      "fullTitle": "POST API calls should respond with the created request data",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "return expect(namedPost).to.have.json('with.content', initialData);",
      "err": {},
      "isRoot": false,
      "uuid": "53a9d6c1-169f-4fc6-bb56-9f88602010b6",
      "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should assert success for the provided name",
      "fullTitle": "POST API calls should assert success for the provided name",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "return expect(namedPost).to.have.json('with.thing', name);",
      "err": {},
      "isRoot": false,
      "uuid": "23977707-d4df-4f51-a615-90ecd860d2a9",
      "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should allow retrieval of the last data point",
      "fullTitle": "POST API calls should allow retrieval of the last data point",
      "timedOut": false,
      "duration": 668,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var dataRetrieval = chakram.get(\"https://dweet.io/get/latest/dweet/for/\"+name);\nreturn expect(dataRetrieval).to.have.json('with[0].content', initialData);",
      "err": {},
      "isRoot": false,
      "uuid": "0302150c-53c3-4584-baa2-223113f005cb",
      "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should respond with data matching the dweet schema",
      "fullTitle": "POST API calls should respond with data matching the dweet schema",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var expectedSchema = {\n    type: \"object\",\n    properties: {\n        this: {type: \"string\"},\n        by: {type: \"string\"},\n        the: {type: \"string\"},\n        with: {\n            type: \"object\",\n            properties: {\n                thing: {type: \"string\"},\n                created: {type: \"string\"},\n                content: {type: \"object\"}\n            },\n            required: [\"thing\", \"created\", \"content\"]\n        }\n    },\n    required: [\"this\", \"by\", \"the\", \"with\"]\n};\nreturn expect(namedPost).to.have.schema(expectedSchema);",
      "err": {},
      "isRoot": false,
      "uuid": "3c21aa67-7ed8-4a2e-b739-7857de6be1ed",
      "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should succeed without a specified name and generate a random name",
      "fullTitle": "miscellaneous post data should succeed without a specified name and generate a random name",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(miscellaneousPost).to.have.status(200);\nexpect(miscellaneousPost).to.have.json('this', 'succeeded');\nreturn chakram.wait();",
      "err": {},
      "isRoot": false,
      "uuid": "1c5291bd-795b-4124-bb3e-d990651a4294",
      "parentUUID": "528d55b3-1527-4fb0-bd0d-c03b7c4827ad",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should assert data retrieval using the new random name",
      "fullTitle": "miscellaneous post data should assert data retrieval using the new random name",
      "timedOut": false,
      "duration": 847,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = chakram.get(\"https://dweet.io/get/latest/dweet/for/\"+postThing);\nreturn expect(data).to.have.json('with', function (response) {\n    expect(response).to.have.length(1);\n    var dweet = response[0];\n    expect(dweet.content).to.deep.equal(initialData);\n    expect(dweet.thing).to.equal(postThing);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "4de472bd-f6db-4559-8224-74d894595bcc",
      "parentUUID": "528d55b3-1527-4fb0-bd0d-c03b7c4827ad",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should assert API response status code",
      "fullTitle": "Validate API response details should assert API response status code",
      "timedOut": false,
      "duration": 415,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//var exists = chakram.get(\"http://httpbin.org/status/200\");\nvar exists = chakram.get(endpoint.openAPI + \"/status/200\");\nvar missing = chakram.get(endpoint.openAPI + \"/status/404\");\nreturn chakram.waitFor([\n\t\texpect(exists).to.have.status(200),\n\t\texpect(missing).to.have.status(404)\n\t]);\n//return chakram.wait(expect(exists).to.have.status(200));",
      "err": {},
      "isRoot": false,
      "uuid": "604ea339-e54d-4bfc-97ba-dc34fdaad206",
      "parentUUID": "2b3a3263-b6f0-4192-a6d2-21df7c9df017",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should assert HTTP specific response values",
      "fullTitle": "Validate API response details should assert HTTP specific response values",
      "timedOut": false,
      "duration": 385,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var response = chakram.get(endpoint.openAPI + \"/get\");\nexpect(response).to.have.json('origin', expectedResponse.origin);\nexpect(response).to.have.json('url', function (url) {\n\texpect(url).to.equal(expectedResponse.url);\n});\nexpect(response).to.comprise.of.json({\n\turl: endpoint.openAPI + \"/get\",\n\theaders: {\n\t\tHost: expectedResponse.headers.Host,\n\t}\n});\nreturn chakram.wait();",
      "err": {},
      "isRoot": false,
      "uuid": "5f707b5b-bde3-49b4-ac54-4094c9ac53cf",
      "parentUUID": "2b3a3263-b6f0-4192-a6d2-21df7c9df017",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return 1 post",
      "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should return 1 post",
      "timedOut": false,
      "duration": 333,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "/*var expectedJson = {\n            \"userId\": 1,\n            \"id\": 1,\n            \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n            \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n        }*/\n        \t\t\n        //var post = chakram.get(\"http://jsonplaceholder.typicode.com/posts/1\");\n        var post = chakram.get(endpoint.placeHolder + \"/posts/1\");\n        \n        expect(post).to.have.json(getExpectedResponse);\n        \n        return chakram.wait();",
      "err": {},
      "isRoot": false,
      "uuid": "3974663c-e486-4740-94a3-a77f44d89faa",
      "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return all posts",
      "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should return all posts",
      "timedOut": false,
      "duration": 3,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "//var allPosts = chakram.get(\"http://jsonplaceholder.typicode.com/posts\");\nvar allPosts = chakram.get(endpoint.placeHolder + \"/posts\");\n\nexpect(allPosts).to.have.status(200);\n/*//TODO: Figure out how to check the length of a JSON\n\t\t\t\t\n\t\texpect(allPosts).to.have.json('with', function (response) {\n        expect(response).to.have.length(1);\n\t\t}*/\n\t\t\n\t\tconsole.log(allPosts.userId.length)\n\nreturn chakram.wait();",
      "err": {
        "estack": "TypeError: Cannot read property 'length' of undefined\n    at Context.<anonymous> (results\\updatePlaceHolder.js:48:30)"
      },
      "isRoot": false,
      "uuid": "dac41e6b-8dc6-4383-8687-31731d13f66b",
      "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should create 1 post",
      "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should create 1 post",
      "timedOut": false,
      "duration": 430,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "/*var postToBeCreated = {\n    \"data\": {\n        \"title\": \"foo\",\n        \"body\": \"bar\",\n        \"userId\": 1\n    }\n};*/\n\n/*var expectedJson = {\n    \"data\": {\n        \"title\": \"foo\",\n        \"body\": \"bar\",\n        \"userId\": 1\n    },\n        \"id\": 101\n};*/\n\n//var createdPost = chakram.post(\"http://jsonplaceholder.typicode.com/posts\", postToBeCreated);\nvar createdPost = chakram.post(endpoint.placeHolder + \"/posts\", postPlaceHolderRequest);\n\nreturn expect(createdPost).to.comprise.of.json(postNewResponse);",
      "err": {},
      "isRoot": false,
      "uuid": "a799319f-2350-4fdf-bee7-03b9b42b1fa3",
      "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update 1 post",
      "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should update 1 post",
      "timedOut": false,
      "duration": 1265,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "/*var postToBeUpdated = {\n    \"data\": {\n        \"id\": 1,\n        \"title\": \"foo\",\n        \"body\": \"bar\",\n        \"userId\": 1\n    }\n};*/\n\n/*var expectedJson = {\n    \"data\": {\n        \"id\": 1,\n        \"title\": \"foo\",\n        \"body\": \"bar\",\n        \"userId\": 1\n    },\n        \"id\": 1\n};*/\n\nvar updatedPost = chakram.put(endpoint.placeHolder + \"/posts/1\", putPlaceHolderRequest);\n\nreturn expect(updatedPost).to.comprise.of.json(putExpectedResponse);",
      "err": {},
      "isRoot": false,
      "uuid": "78569c50-5da2-4646-8c56-dea5e8bfc03d",
      "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should delete 1 post",
      "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should delete 1 post",
      "timedOut": false,
      "duration": 647,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var expectedJson = {};\n\nvar deletedPost = chakram.delete(endpoint.placeHolder + \"/posts/1\");\n\nreturn expect(deletedPost).to.comprise.of.json(expectedJson);",
      "err": {},
      "isRoot": false,
      "uuid": "931e3d14-d38b-4910-858f-086a8867ca47",
      "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should return success http status code",
      "fullTitle": "POST API calls should return success http status code",
      "timedOut": false,
      "duration": 1405,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "return expect(namedPost).to.have.status(200);",
      "err": {},
      "isRoot": false,
      "uuid": "bf8adfb3-24c3-4307-a7d4-2ddf17ce5b45",
      "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "assert should be success in the response 'this' field",
      "fullTitle": "POST API calls assert should be success in the response 'this' field",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "return expect(namedPost).to.have.json('this', 'succeeded');",
      "err": {},
      "isRoot": false,
      "uuid": "3a92bab1-7e88-452d-bcd7-ad8cb83347d3",
      "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should respond with the created request data",
      "fullTitle": "POST API calls should respond with the created request data",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "return expect(namedPost).to.have.json('with.content', initialData);",
      "err": {},
      "isRoot": false,
      "uuid": "53a9d6c1-169f-4fc6-bb56-9f88602010b6",
      "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should assert success for the provided name",
      "fullTitle": "POST API calls should assert success for the provided name",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "return expect(namedPost).to.have.json('with.thing', name);",
      "err": {},
      "isRoot": false,
      "uuid": "23977707-d4df-4f51-a615-90ecd860d2a9",
      "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should allow retrieval of the last data point",
      "fullTitle": "POST API calls should allow retrieval of the last data point",
      "timedOut": false,
      "duration": 668,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var dataRetrieval = chakram.get(\"https://dweet.io/get/latest/dweet/for/\"+name);\nreturn expect(dataRetrieval).to.have.json('with[0].content', initialData);",
      "err": {},
      "isRoot": false,
      "uuid": "0302150c-53c3-4584-baa2-223113f005cb",
      "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should respond with data matching the dweet schema",
      "fullTitle": "POST API calls should respond with data matching the dweet schema",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var expectedSchema = {\n    type: \"object\",\n    properties: {\n        this: {type: \"string\"},\n        by: {type: \"string\"},\n        the: {type: \"string\"},\n        with: {\n            type: \"object\",\n            properties: {\n                thing: {type: \"string\"},\n                created: {type: \"string\"},\n                content: {type: \"object\"}\n            },\n            required: [\"thing\", \"created\", \"content\"]\n        }\n    },\n    required: [\"this\", \"by\", \"the\", \"with\"]\n};\nreturn expect(namedPost).to.have.schema(expectedSchema);",
      "err": {},
      "isRoot": false,
      "uuid": "3c21aa67-7ed8-4a2e-b739-7857de6be1ed",
      "parentUUID": "d76df518-c191-48e1-b78c-e22299baa8d5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should succeed without a specified name and generate a random name",
      "fullTitle": "miscellaneous post data should succeed without a specified name and generate a random name",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(miscellaneousPost).to.have.status(200);\nexpect(miscellaneousPost).to.have.json('this', 'succeeded');\nreturn chakram.wait();",
      "err": {},
      "isRoot": false,
      "uuid": "1c5291bd-795b-4124-bb3e-d990651a4294",
      "parentUUID": "528d55b3-1527-4fb0-bd0d-c03b7c4827ad",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should assert data retrieval using the new random name",
      "fullTitle": "miscellaneous post data should assert data retrieval using the new random name",
      "timedOut": false,
      "duration": 847,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var data = chakram.get(\"https://dweet.io/get/latest/dweet/for/\"+postThing);\nreturn expect(data).to.have.json('with', function (response) {\n    expect(response).to.have.length(1);\n    var dweet = response[0];\n    expect(dweet.content).to.deep.equal(initialData);\n    expect(dweet.thing).to.equal(postThing);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "4de472bd-f6db-4559-8224-74d894595bcc",
      "parentUUID": "528d55b3-1527-4fb0-bd0d-c03b7c4827ad",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should assert API response status code",
      "fullTitle": "Validate API response details should assert API response status code",
      "timedOut": false,
      "duration": 415,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//var exists = chakram.get(\"http://httpbin.org/status/200\");\nvar exists = chakram.get(endpoint.openAPI + \"/status/200\");\nvar missing = chakram.get(endpoint.openAPI + \"/status/404\");\nreturn chakram.waitFor([\n\t\texpect(exists).to.have.status(200),\n\t\texpect(missing).to.have.status(404)\n\t]);\n//return chakram.wait(expect(exists).to.have.status(200));",
      "err": {},
      "isRoot": false,
      "uuid": "604ea339-e54d-4bfc-97ba-dc34fdaad206",
      "parentUUID": "2b3a3263-b6f0-4192-a6d2-21df7c9df017",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should assert HTTP specific response values",
      "fullTitle": "Validate API response details should assert HTTP specific response values",
      "timedOut": false,
      "duration": 385,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var response = chakram.get(endpoint.openAPI + \"/get\");\nexpect(response).to.have.json('origin', expectedResponse.origin);\nexpect(response).to.have.json('url', function (url) {\n\texpect(url).to.equal(expectedResponse.url);\n});\nexpect(response).to.comprise.of.json({\n\turl: endpoint.openAPI + \"/get\",\n\theaders: {\n\t\tHost: expectedResponse.headers.Host,\n\t}\n});\nreturn chakram.wait();",
      "err": {},
      "isRoot": false,
      "uuid": "5f707b5b-bde3-49b4-ac54-4094c9ac53cf",
      "parentUUID": "2b3a3263-b6f0-4192-a6d2-21df7c9df017",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return 1 post",
      "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should return 1 post",
      "timedOut": false,
      "duration": 333,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "/*var expectedJson = {\n            \"userId\": 1,\n            \"id\": 1,\n            \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n            \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n        }*/\n        \t\t\n        //var post = chakram.get(\"http://jsonplaceholder.typicode.com/posts/1\");\n        var post = chakram.get(endpoint.placeHolder + \"/posts/1\");\n        \n        expect(post).to.have.json(getExpectedResponse);\n        \n        return chakram.wait();",
      "err": {},
      "isRoot": false,
      "uuid": "3974663c-e486-4740-94a3-a77f44d89faa",
      "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should create 1 post",
      "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should create 1 post",
      "timedOut": false,
      "duration": 430,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "/*var postToBeCreated = {\n    \"data\": {\n        \"title\": \"foo\",\n        \"body\": \"bar\",\n        \"userId\": 1\n    }\n};*/\n\n/*var expectedJson = {\n    \"data\": {\n        \"title\": \"foo\",\n        \"body\": \"bar\",\n        \"userId\": 1\n    },\n        \"id\": 101\n};*/\n\n//var createdPost = chakram.post(\"http://jsonplaceholder.typicode.com/posts\", postToBeCreated);\nvar createdPost = chakram.post(endpoint.placeHolder + \"/posts\", postPlaceHolderRequest);\n\nreturn expect(createdPost).to.comprise.of.json(postNewResponse);",
      "err": {},
      "isRoot": false,
      "uuid": "a799319f-2350-4fdf-bee7-03b9b42b1fa3",
      "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should update 1 post",
      "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should update 1 post",
      "timedOut": false,
      "duration": 1265,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "/*var postToBeUpdated = {\n    \"data\": {\n        \"id\": 1,\n        \"title\": \"foo\",\n        \"body\": \"bar\",\n        \"userId\": 1\n    }\n};*/\n\n/*var expectedJson = {\n    \"data\": {\n        \"id\": 1,\n        \"title\": \"foo\",\n        \"body\": \"bar\",\n        \"userId\": 1\n    },\n        \"id\": 1\n};*/\n\nvar updatedPost = chakram.put(endpoint.placeHolder + \"/posts/1\", putPlaceHolderRequest);\n\nreturn expect(updatedPost).to.comprise.of.json(putExpectedResponse);",
      "err": {},
      "isRoot": false,
      "uuid": "78569c50-5da2-4646-8c56-dea5e8bfc03d",
      "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should delete 1 post",
      "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should delete 1 post",
      "timedOut": false,
      "duration": 647,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var expectedJson = {};\n\nvar deletedPost = chakram.delete(endpoint.placeHolder + \"/posts/1\");\n\nreturn expect(deletedPost).to.comprise.of.json(expectedJson);",
      "err": {},
      "isRoot": false,
      "uuid": "931e3d14-d38b-4910-858f-086a8867ca47",
      "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "should assert music track based on artist",
      "fullTitle": "Get music should assert music track based on artist",
      "timedOut": false,
      "duration": 797,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "var artist = data.music.artist;\n\t\tvar track = data.music.track;\n\t\treturn chakram.get(endpoint.music + \"/v1/search?q=\" + artist + \"&type=artist\")\n\t\t.then(function (searchResponse) {\n\t\t\tvar bigID = searchResponse.body.artists.items[0].id;\n\t\t\treturn chakram.get(endpoint.music + \"/v1/artists/\" + bigID + \"/top-tracks?country=GB\");\n\t\t})\n\t\t.then(function (topTrackResponse) {\n\t\t\tvar topTrack = topTrackResponse.body.tracks[0];\n\t\t\texpect(topTrack.name).to.contain(track);\n\t\t});",
      "err": {
        "estack": "TypeError: Cannot read property 'items' of undefined\n    at results\\music.js:17:43\n    at _fulfilled (node_modules\\q\\q.js:854:54)\n    at self.promiseDispatch.done (node_modules\\q\\q.js:883:30)\n    at Promise.promise.promiseDispatch (node_modules\\q\\q.js:816:13)\n    at node_modules\\q\\q.js:624:44\n    at runSingle (node_modules\\q\\q.js:137:13)\n    at flush (node_modules\\q\\q.js:125:13)\n    at _combinedTickCallback (internal/process/next_tick.js:73:7)\n    at process._tickCallback (internal/process/next_tick.js:104:9)"
      },
      "isRoot": false,
      "uuid": "aa6d7cea-b65a-42dc-a3eb-fb97cb0a6b16",
      "parentUUID": "7407654c-42e9-41e0-be69-66eba41a585c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return all posts",
      "fullTitle": "API Testing for https://github.com/typicode/jsonplaceholder should return all posts",
      "timedOut": false,
      "duration": 3,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "//var allPosts = chakram.get(\"http://jsonplaceholder.typicode.com/posts\");\nvar allPosts = chakram.get(endpoint.placeHolder + \"/posts\");\n\nexpect(allPosts).to.have.status(200);\n/*//TODO: Figure out how to check the length of a JSON\n\t\t\t\t\n\t\texpect(allPosts).to.have.json('with', function (response) {\n        expect(response).to.have.length(1);\n\t\t}*/\n\t\t\n\t\tconsole.log(allPosts.userId.length)\n\nreturn chakram.wait();",
      "err": {
        "estack": "TypeError: Cannot read property 'length' of undefined\n    at Context.<anonymous> (results\\updatePlaceHolder.js:48:30)"
      },
      "isRoot": false,
      "uuid": "dac41e6b-8dc6-4383-8687-31731d13f66b",
      "parentUUID": "40bdcfd1-1232-45c2-8995-fd81f83cb5ea",
      "isHook": false,
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}